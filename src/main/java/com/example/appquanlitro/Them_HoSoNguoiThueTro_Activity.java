package com.example.appquanlitro;

import android.app.DatePickerDialog;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

public class Them_HoSoNguoiThueTro_Activity extends AppCompatActivity {

    EditText mahoso, cccd, phongthue, giatien, hinhthucthue, ngaybatdauthue, ngayketthucthue, trangthai;
    TextView  hovaten, sdt, quequan, ngaysinh;
    Button btnAdd, btnHuy;

    Database database;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_them_hosonguoithuetro);

        // √Ånh x·∫° c√°c view
        mahoso = findViewById(R.id.mahoso);
        hovaten = findViewById(R.id.hovaten);
        ngaysinh = findViewById(R.id.ngaysinh);
        cccd = findViewById(R.id.cccd);
        sdt = findViewById(R.id.sdt);
        quequan = findViewById(R.id.quequan);
        phongthue = findViewById(R.id.id);
        giatien = findViewById(R.id.giatien);
        hinhthucthue = findViewById(R.id.hinhthucthue);
        ngaybatdauthue = findViewById(R.id.ngaybatdauthue);
        ngayketthucthue = findViewById(R.id.ngayketthucthue);
        trangthai = findViewById(R.id.trangthai);
        btnAdd = findViewById(R.id.btnSave);
        btnHuy = findViewById(R.id.btnHuy);

        // Kh·ªüi t·∫°o database
        database = new Database(this, "quanlitro.db", null, 1);
        database.QueryData("CREATE TABLE IF NOT EXISTS hosothuetro (maid INTEGER PRIMARY KEY AUTOINCREMENT, mahoso TEXT, hovaten TEXT, ngaysinh TEXT, cccd TEXT, quequan TEXT, sdt TEXT, id INTEGER, giatien TEXT, hinhthucthue TEXT, ngaybatdau TEXT, ngayketthuc TEXT, xacnhanhopdong TEXT, trangthai TEXT)");

        // X·ª≠ l√Ω s·ª± ki·ªán ch·ªçn ph√≤ng
        phongthue.setOnClickListener(v -> showDanhSachPhongDialog());

        // X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫≠p CCCD
        cccd.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (s.length() == 12) {
                    String cccdText = s.toString();
                    loadThongTinTuCCCD(cccdText);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {}
        });


        // X·ª≠ l√Ω s·ª± ki·ªán ch·ªçn ng√†y b·∫Øt ƒë·∫ßu thu√™
        ngaybatdauthue.setOnClickListener(v -> showDatePicker());

        // X·ª≠ l√Ω s·ª± ki·ªán ch·ªçn h√¨nh th·ª©c thu√™
        hinhthucthue.setOnClickListener(v -> showHinhThucThueDialog());

        // X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•n n√∫t "Th√™m"
        btnAdd.setOnClickListener(v -> saveHoSoThueTro());

        // X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•n n√∫t "H·ªßy"
        btnHuy.setOnClickListener(view -> {
            Intent intent = new Intent(Them_HoSoNguoiThueTro_Activity.this, HoSo_NguoiThueTro_Admin_Activity.class);
            startActivity(intent);
        });
    }

    // Hi·ªÉn th·ªã dialog ch·ªçn ph√≤ng
    private void showDanhSachPhongDialog() {
        Cursor cursor = database.GetData("SELECT id, tenphong, giatien FROM phongtro");
        if (cursor == null) {
            Toast.makeText(this, "Kh√¥ng c√≥ d·ªØ li·ªáu ph√≤ng", Toast.LENGTH_SHORT).show();
            return;
        }

        List<String> danhSachPhong = new ArrayList<>();
        List<Integer> danhSachId = new ArrayList<>();
        List<Long> danhSachGiaTien = new ArrayList<>();

        while (cursor.moveToNext()) {
            int id = cursor.getInt(0);
            String tenPhong = cursor.getString(1);
            long giaTien = cursor.getLong(2);
            danhSachPhong.add(tenPhong + " - " + giaTien + " VNƒê");
            danhSachId.add(id);
            danhSachGiaTien.add(giaTien);
        }
        cursor.close();

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Ch·ªçn ph√≤ng");
        builder.setItems(danhSachPhong.toArray(new String[0]), (dialog, which) -> {
            phongthue.setText(danhSachPhong.get(which)); // Hi·ªÉn th·ªã "T√™n ph√≤ng - Gi√° ti·ªÅn VNƒê"
            phongthue.setTag(danhSachId.get(which)); // L∆∞u ID ph√≤ng v√†o tag ƒë·ªÉ x·ª≠ l√Ω khi l∆∞u
            giatien.setText(String.valueOf(danhSachGiaTien.get(which)));
        });
        builder.show();
    }

    // Ki·ªÉm tra xem CCCD c√≥ ƒëang thu√™ ph√≤ng kh√°c kh√¥ng
    private boolean isCCCDStillRenting(String cccd, String ngayBatDauMoi) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault());
        try {
            Date ngayBatDauMoiDate = sdf.parse(ngayBatDauMoi);

            Cursor cursor = database.GetData("SELECT ngayketthuc FROM hosothuetro WHERE cccd = '" + cccd + "'");
            while (cursor.moveToNext()) {
                Date ngayKetThucCu = sdf.parse(cursor.getString(0));
                if (ngayKetThucCu != null && ngayKetThucCu.compareTo(ngayBatDauMoiDate) >= 0) {
                    cursor.close();
                    return true;
                }
            }
            cursor.close();
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Load th√¥ng tin t·ª´ CCCD
    private void loadThongTinTuCCCD(String cccd) {
        Cursor cursor = database.GetData("SELECT hovaten, ngaysinh, sdt, quequan FROM taikhoan WHERE cccd = '" + cccd + "'");
        if (cursor != null && cursor.moveToFirst()) {
            hovaten.setText(cursor.getString(0));
            ngaysinh.setText(cursor.getString(1));
            sdt.setText(cursor.getString(2));
            quequan.setText(cursor.getString(3));
            cursor.close();
        } else {
            Toast.makeText(this, "CCCD kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng", Toast.LENGTH_SHORT).show();
        }
    }

    // Hi·ªÉn th·ªã DatePickerDialog
    private void showDatePicker() {
        final Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int day = calendar.get(Calendar.DAY_OF_MONTH);

        DatePickerDialog datePickerDialog = new DatePickerDialog(this, (view, selectedYear, selectedMonth, selectedDay) -> {
            String formattedDate = String.format("%02d/%02d/%04d", selectedDay, selectedMonth + 1, selectedYear);
            ngaybatdauthue.setText(formattedDate);
            calculateEndDate(formattedDate);
        }, year, month, day);

        // üîí Ch·ªâ cho ph√©p ch·ªçn ng√†y t·ª´ h√¥m nay tr·ªü ƒëi
        datePickerDialog.getDatePicker().setMinDate(calendar.getTimeInMillis());

        datePickerDialog.show();
    }


    // Hi·ªÉn th·ªã dialog ch·ªçn h√¨nh th·ª©c thu√™
    private void showHinhThucThueDialog() {
        final String[] hinhThucThue = {"6 th√°ng", "1 nƒÉm"};
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Ch·ªçn h√¨nh th·ª©c thu√™");
        builder.setItems(hinhThucThue, (dialog, which) -> {
            hinhthucthue.setText(hinhThucThue[which]);
            calculateEndDate(ngaybatdauthue.getText().toString());
        });
        builder.show();
    }



    // T√≠nh to√°n ng√†y k·∫øt th√∫c thu√™
    private void calculateEndDate(String startDate) {
        if (startDate.isEmpty() || hinhthucthue.getText().toString().isEmpty()) return;

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault());
        try {
            Date date = sdf.parse(startDate);
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(date);

            if (hinhthucthue.getText().toString().equals("6 th√°ng")) {
                calendar.add(Calendar.MONTH, 6);
            } else if (hinhthucthue.getText().toString().equals("1 nƒÉm")) {
                calendar.add(Calendar.YEAR, 1);
            }

            String endDate = sdf.format(calendar.getTime());
            ngayketthucthue.setText(endDate);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    // L∆∞u h·ªì s∆° thu√™ tr·ªç
    private void saveHoSoThueTro() {
        try {
            String cccdText = cccd.getText().toString();
            String phongThueText = phongthue.getTag() != null ? phongthue.getTag().toString() : "";            String ngayBatDauText = ngaybatdauthue.getText().toString();
            String maHoSoText = mahoso.getText().toString();

            // Ki·ªÉm tra c√°c tr∆∞·ªùng d·ªØ li·ªáu
            if (maHoSoText.isEmpty() || hovaten.getText().toString().isEmpty() || ngaysinh.getText().toString().isEmpty() ||
                    cccdText.isEmpty() || quequan.getText().toString().isEmpty() || sdt.getText().toString().isEmpty() ||
                    phongThueText.isEmpty() || giatien.getText().toString().isEmpty() || hinhthucthue.getText().toString().isEmpty() ||
                    ngayBatDauText.isEmpty() || ngayketthucthue.getText().toString().isEmpty()) {
                Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin", Toast.LENGTH_SHORT).show();
                return;
            }

            // Ki·ªÉm tra CCCD c√≥ t·ªìn t·∫°i kh√¥ng
            if (!checkCCCDExists(cccdText)) {
                Toast.makeText(this, "CCCD kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng", Toast.LENGTH_SHORT).show();
                return;
            }

            // Ki·ªÉm tra CCCD c√≥ ƒëang thu√™ ph√≤ng kh√°c kh√¥ng
            if (isCCCDStillRenting(cccdText, ngayBatDauText)) {
                Toast.makeText(this, "Ng∆∞·ªùi n√†y v·∫´n ƒëang c√≥ h·ª£p ƒë·ªìng thu√™ kh√°c r·ªìi!", Toast.LENGTH_LONG).show();
                return;
            }

            // Ki·ªÉm tra xem mahoso ƒë√£ t·ªìn t·∫°i ch∆∞a
            if (isMaHoSoExists(maHoSoText)) {
                // N·∫øu mahoso t·ªìn t·∫°i, ki·ªÉm tra CCCD c√≥ kh√°c ng∆∞·ªùi tr∆∞·ªõc kh√¥ng
                if (isCCCDDifferent(cccdText, maHoSoText)) {
                    // Ki·ªÉm tra s·ªë l∆∞·ª£ng CCCD cho ph√©p trong ph√≤ng
                    int soLuongCCCDAllowed = getSoLuongCCCDAllowed(phongThueText);
                    if (soLuongCCCDAllowed == -1) {
                        Toast.makeText(this, "Ph√≤ng kh√¥ng t·ªìn t·∫°i", Toast.LENGTH_SHORT).show();
                        return;
                    }

                    // Ki·ªÉm tra s·ªë l∆∞·ª£ng CCCD hi·ªán t·∫°i
                    if (!checkSoLuongCCCD(phongThueText, soLuongCCCDAllowed)) {
                        return; // Kh√¥ng ƒë·ªß ch·ªó
                    }

                    // Ki·ªÉm tra h·ª£p ƒë·ªìng ƒë√£ t·ªìn t·∫°i
                    if (!isContractDetailsMatch(maHoSoText, phongThueText, ngayBatDauText, hinhthucthue.getText().toString())) {
                        Toast.makeText(this, "Th√¥ng tin h·ª£p ƒë·ªìng kh√¥ng kh·ªõp!", Toast.LENGTH_LONG).show();
                        return;
                    }
                } else {
                    Toast.makeText(this, "CCCD ƒë√£ t·ªìn t·∫°i trong h·ªì s∆° n√†y. Vui l√≤ng nh·∫≠p CCCD kh√°c.", Toast.LENGTH_LONG).show();
                    return;
                }
            }

            // Th√™m h·ªì s∆° v√†o database
            database.QueryData("INSERT INTO hosothuetro (mahoso, hovaten, ngaysinh, cccd, quequan, sdt, id, giatien, hinhthucthue, ngaybatdau, ngayketthuc, xacnhanhopdong, trangthai) VALUES ('" +
                    maHoSoText + "', '" +
                    hovaten.getText().toString() + "', '" +
                    ngaysinh.getText().toString() + "', '" +
                    cccdText + "', '" +
                    quequan.getText().toString() + "', '" +
                    sdt.getText().toString() + "', " +
                    phongThueText + ", '" +
                    giatien.getText().toString() + "', '" +
                    hinhthucthue.getText().toString() + "', '" +
                    ngayBatDauText + "', '" +
                    ngayketthucthue.getText().toString() + "', 'Kh√°ch ƒê√£ X√°c Nh·∫≠n', 'ƒêang thu√™');");

            Toast.makeText(this, "Th√™m h·ªì s∆° th√†nh c√¥ng", Toast.LENGTH_SHORT).show();
            finish();
        } catch (Exception e) {
            e.printStackTrace();
            Toast.makeText(this, "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage(), Toast.LENGTH_SHORT).show();
        }
    }

    // Ki·ªÉm tra CCCD c√≥ ƒëang thu√™ v·ªõi tr·∫°ng th√°i "ƒêang Thu√™"
    private boolean checkCCCDInActiveContracts(String cccd) {
        Cursor cursor = database.GetData("SELECT * FROM hosothuetro WHERE cccd = '" + cccd + "' AND trangthai = 'ƒêang thu√™'");
        boolean exists = cursor.getCount() > 0;
        cursor.close();
        return exists;
    }

    // Ki·ªÉm tra CCCD c√≥ kh√°c ng∆∞·ªùi tr∆∞·ªõc kh√¥ng
    private boolean isCCCDDifferent(String cccd, String maHoSo) {
        Cursor cursor = database.GetData("SELECT cccd FROM hosothuetro WHERE mahoso = '" + maHoSo + "'");
        if (cursor.moveToFirst()) {
            String existingCCCD = cursor.getString(0);
            cursor.close();
            return !existingCCCD.equals(cccd);
        }
        cursor.close();
        return false;
    }

    // Ki·ªÉm tra CCCD c√≥ t·ªìn t·∫°i kh√¥ng
    private boolean checkCCCDExists(String cccd) {
        Cursor cursor = database.GetData("SELECT * FROM taikhoan WHERE cccd = '" + cccd + "'");
        boolean exists = cursor.getCount() > 0;
        cursor.close();
        return exists;
    }

    // Ki·ªÉm tra m√£ h·ªì s∆° ƒë√£ t·ªìn t·∫°i ch∆∞a
    private boolean isMaHoSoExists(String maHoSo) {
        Cursor cursor = database.GetData("SELECT * FROM hosothuetro WHERE mahoso = '" + maHoSo + "'");
        boolean exists = cursor.getCount() > 0;
        cursor.close();
        return exists;
    }

    // Ki·ªÉm tra di·ªán t√≠ch ph√≤ng thu√™ t·ªëi ƒëa
    private int getSoLuongCCCDAllowed(String phongThue) {
        Cursor cursor = database.GetData("SELECT dientich FROM phongtro WHERE id = " + phongThue);
        if (cursor.moveToFirst()) {
            int dientich = cursor.getInt(0);
            cursor.close();
            if (dientich < 13) return 1;
            else if (dientich <= 26) return 2;
            else if (dientich <= 38) return 3;
        }
        return -1;
    }

    private boolean checkSoLuongCCCD(String phongThue, int soLuongCCCDAllowed) {
        Cursor cursor = database.GetData("SELECT COUNT(*) FROM hosothuetro WHERE id = " + phongThue);
        if (cursor.moveToFirst()) {
            int soLuongCCCDHienTai = cursor.getInt(0);
            cursor.close();

            if (soLuongCCCDHienTai >= soLuongCCCDAllowed) {
                Toast.makeText(this, "Ph√≤ng n√†y ch·ªâ ƒë∆∞·ª£c ph√©p t·ªëi ƒëa " + soLuongCCCDAllowed + " ng∆∞·ªùi. Hi·ªán t·∫°i ƒë√£ c√≥ " + soLuongCCCDHienTai + " ng∆∞·ªùi.", Toast.LENGTH_LONG).show();
                return false;
            }
            return true;
        }
        return false;
    }

    // Ki·ªÉm tra th√¥ng tin h·ª£p ƒë·ªìng c√≥ kh·ªõp kh√¥ng
    private boolean isContractDetailsMatch(String maHoSo, String phongThue, String ngayBatDau, String hinhThucThue) {
        Cursor cursor = database.GetData("SELECT * FROM hosothuetro WHERE mahoso = '" + maHoSo + "'");
        if (cursor.moveToFirst()) {
            int phongThueIndex = cursor.getColumnIndex("id");
            int ngayBatDauIndex = cursor.getColumnIndex("ngaybatdau");
            int hinhThucThueIndex = cursor.getColumnIndex("hinhthucthue");

            if (phongThueIndex != -1 && ngayBatDauIndex != -1 && hinhThucThueIndex != -1) {
                String existingPhongThue = cursor.getString(phongThueIndex);
                String existingNgayBatDau = cursor.getString(ngayBatDauIndex);
                String existingHinhThucThue = cursor.getString(hinhThucThueIndex);
                cursor.close();
                return existingPhongThue.equals(phongThue) && existingNgayBatDau.equals(ngayBatDau) && existingHinhThucThue.equals(hinhThucThue);
            }
        }
        cursor.close();
        return false;
    }
}